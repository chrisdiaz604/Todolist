{"ast":null,"code":"var _jsxFileName = \"/Users/chido/Desktop/my-app/src/App.js\";\n\n/**\n * Let's make it so our checkbox can actually mark our todo as complete or incomplete!\n * This challenge is a little more involved than some of the past ones. Check the comments \n * in the code for some help on accomplishing this one\n * \n * Challenge: \n * 1. Create an event handler in the App component for when the checkbox is clicked (which is an `onChange` event)\n *    a. This method will be the trickest part. Check the comments in the stubbed-out method below for some pseudocode to help guide you through this part\n * 2. Pass the method down to the TodoItem component\n * 3. In the TodoItem component, make it so when the `onChange` event happens, it calls the `handleChange` method and passes the id of the todo into the function\n */\nimport React from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport todosData from \"./todosData\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: todosData\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(id) {\n    this.setState(prevState => {\n      const updatedTodos = prevState.todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n\n        return todo;\n      });\n      return {\n        todos: updatedTodos\n      };\n    });\n  }\n\n  render() {\n    const todoItems = this.state.todos.map(item => React.createElement(TodoItem, {\n      key: item.id,\n      item: item,\n      handleChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"todo-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, todoItems);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/chido/Desktop/my-app/src/App.js"],"names":["React","TodoItem","todosData","App","Component","constructor","state","todos","handleChange","bind","id","setState","prevState","updatedTodos","map","todo","completed","render","todoItems","item"],"mappings":";;AAAA;;;;;;;;;;;AAYA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAC9BC,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAEL;AADE,KAAb;AAGA,SAAKM,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AAEDD,EAAAA,YAAY,CAACE,EAAD,EAAK;AACb,SAAKC,QAAL,CAAcC,SAAS,IAAI;AACvB,YAAMC,YAAY,GAAGD,SAAS,CAACL,KAAV,CAAgBO,GAAhB,CAAoBC,IAAI,IAAI;AAC7C,YAAIA,IAAI,CAACL,EAAL,KAAYA,EAAhB,EAAoB;AAChBK,UAAAA,IAAI,CAACC,SAAL,GAAiB,CAACD,IAAI,CAACC,SAAvB;AACH;;AACD,eAAOD,IAAP;AACH,OALoB,CAArB;AAMA,aAAO;AACHR,QAAAA,KAAK,EAAEM;AADJ,OAAP;AAGH,KAVD;AAWH;;AAEDI,EAAAA,MAAM,GAAG;AACL,UAAMC,SAAS,GAAG,KAAKZ,KAAL,CAAWC,KAAX,CAAiBO,GAAjB,CAAqBK,IAAI,IAAI,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,IAAI,CAACT,EAApB;AAAwB,MAAA,IAAI,EAAES,IAA9B;AAAoC,MAAA,YAAY,EAAE,KAAKX,YAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA7B,CAAlB;AAEA,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKU,SADL,CADJ;AAKH;;AA/B6B;;AAkClC,eAAef,GAAf","sourcesContent":["/**\n * Let's make it so our checkbox can actually mark our todo as complete or incomplete!\n * This challenge is a little more involved than some of the past ones. Check the comments \n * in the code for some help on accomplishing this one\n * \n * Challenge: \n * 1. Create an event handler in the App component for when the checkbox is clicked (which is an `onChange` event)\n *    a. This method will be the trickest part. Check the comments in the stubbed-out method below for some pseudocode to help guide you through this part\n * 2. Pass the method down to the TodoItem component\n * 3. In the TodoItem component, make it so when the `onChange` event happens, it calls the `handleChange` method and passes the id of the todo into the function\n */\n\nimport React from \"react\"\nimport TodoItem from \"./TodoItem\"\nimport todosData from \"./todosData\"\n\nclass App extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            todos: todosData\n        }\n        this.handleChange = this.handleChange.bind(this)\n    }\n    \n    handleChange(id) {\n        this.setState(prevState => {\n            const updatedTodos = prevState.todos.map(todo => {\n                if (todo.id === id) {\n                    todo.completed = !todo.completed\n                }\n                return todo\n            })\n            return {\n                todos: updatedTodos\n            }\n        })\n    }\n    \n    render() {\n        const todoItems = this.state.todos.map(item => <TodoItem key={item.id} item={item} handleChange={this.handleChange}/>)\n        \n        return (\n            <div className=\"todo-list\">\n                {todoItems}\n            </div>\n        )    \n    }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}